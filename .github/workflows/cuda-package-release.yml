name: Build and Release CUDA Package

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'  # Trigger on version tags

jobs:
  build:
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - python-version: '3.9'
          - python-version: '3.10'
          - python-version: '3.11'
          - python-version: '3.12'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 9
        platform: x64
    
    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    # Install CUDA
    - name: Install CUDA
      uses: Jimver/cuda-toolkit@4bd727d5619dc6fa323b1e76c3aa5dca94f5ec6d # v0.2.19
      with:
        log-file-suffix: ${{ matrix.python-version }}.txt
      
    # Install system dependencies
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y freeglut3-dev libgl1-mesa-dev libglu1-mesa-dev wget curl cmake libopenblas-dev
    
    # Install MAGMA
    - name: Install MAGMA
      run: |
        wget http://icl.utk.edu/projectsfiles/magma/downloads/magma-2.8.0.tar.gz
        tar -zxvf magma-2.8.0.tar.gz
        cd magma-2.8.0
        cp make.inc-examples/make.inc.openblas make.inc
        export GPU_TARGET="Maxwell Pascal Volta Turing Ampere"
        export CUDADIR=/usr/local/cuda
        export OPENBLASDIR="/usr"
        make -j$(nproc)
        sudo -E make install prefix=/usr/local/magma
    
    # Install Python dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio
        pip install wheel setuptools build
    
    # Build the CUDA package
    - name: Build CUDA package
      run: |
        cd cuda
        TORCH_CUDA_ARCH_LIST="6.0 7.0 7.5 8.0 8.6+PTX" python setup.py bdist_wheel
    
    # Upload wheel as artifact
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v4
      with:
        name: kilonerf-cuda-wheel-${{ matrix.python-version }}
        path: cuda/dist/*.whl

  release:
    needs: build
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
      
      - name: Create Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            dist/**/*.whl
            dist/*/*.whl
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}